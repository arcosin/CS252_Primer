Note: review "The UNIX Operating System" slides (pg 135 in class slides).

Jobs of the OS:
  - Core:
    - multi-process.
    - multi-user.
    - file system.
  - Extended:
    - Networking, devices, drivers.
    - Graphical interface, windowing system.
    - Standard programs.
    - Common libraries.
    - Basic security.

System calls:
  - Special functions used to talk to the OS directly.
  - User program --> OS.
  - Includes read, write, open, close, exit, kill, exec, fork, chdir, chmod, chown, etc.
  - https://man7.org/linux/man-pages/man2/syscalls.2.html.

Signals:
  - Program interupts that let the OS manipulate the user program.
  - OS --> user program.
  - Includes SIGINT (ctrl-c), SIGSEGV (segmentation fault), SIGPIPE (tried IO with a broken socket or pipe), etc.
  - https://man7.org/linux/man-pages/man7/signal.7.html.

Processes:
  - The basic unit of program execution on the computer.
  - Managed by the OS.
  - Can contain many threads.
  - Usually has an exclusive pool of memory.
  - Associated with a process table (indexed by PID).
  - Use fork() to split processes.

Process table:
  - PID.
  - User ID.
  - Current directory.
  - Args.
  - Enviromental vars.
  - Open file descriptors (default: 0, 1, 2).
  - Other OS info, mem info, program info, etc.

File descriptors:
  - An integer associated with an object in the FS.
  - Used for almost all interaction with the rest of the system (in unix, everything is a file).
  - Supplied to system calls for IO.

Threads:
  - Lightweight process.
  - No entry in process table, no exclusive memory, no PID.
  - Needs "-lpthread" flag in compiler.
    - Example: "g++ -o main main.cc -lpthread".
